package com.maxeler.examples.udpOneToMany;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.UDPChecksumMode;
import com.maxeler.networking.v1.managers.netlib.UDPConnectionMode;
import com.maxeler.networking.v1.managers.netlib.UDPStream;

public class UdpOneToManyManager extends NetworkManager {

	public UdpOneToManyManager(final UdpOneToManyParameters params) {
		super(params.getEngineParams());

		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(params.hasStreamStatus()));

		final UDPStream udpTop1 = addUDPStream("udpTopPort1", Max4NetworkConnection.QSFP_TOP_10G_PORT1, UDPConnectionMode.OneToMany, UDPChecksumMode.Disabled);
		final UDPStream udpBot1 = addUDPStream("udpBotPort1", Max4NetworkConnection.QSFP_BOT_10G_PORT1, UDPConnectionMode.OneToMany, UDPChecksumMode.Disabled);
		final ManagerClock netClk = getNetworkClock(Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		pushDefaultClock(netClk);

		/*
		 * We need to use kernels to transform the RX & TX data, since otherwise the metadata will be lost.
		 * The kernels insert the metadata into the data field and extract it again before transmitting.
		 */

		final KernelBlock rxKernel = addKernel(new UdpOneToManyRxKernel(makeKernelParameters("RxKernel")));
		rxKernel.getInput(UdpOneToManyRxKernel.INPUT) <== udpTop1.getReceiveStream();
		addFramedStreamToCPU("toCpu", UdpOneToManyRxKernel.OUTPUT_TYPE, 512, 512) <== rxKernel.getOutput(UdpOneToManyRxKernel.OUTPUT);

		final KernelBlock txKernel = addKernel(new UdpOneToManyTxKernel(makeKernelParameters("TxKernel")));
		txKernel.getInput(UdpOneToManyTxKernel.INPUT) <== addFramedStreamFromCPU("fromCpu", UdpOneToManyTxKernel.INPUT_TYPE);
		udpBot1.getTransmitStream() <== txKernel.getOutput(UdpOneToManyTxKernel.OUTPUT);
	}

	public static void main(final String[] args) {
		final UdpOneToManyParameters params = new UdpOneToManyParameters(args);
		final UdpOneToManyManager manager = new UdpOneToManyManager(params);

		final BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}
}
